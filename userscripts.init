#!/bin/sh
#
# userscripts:	Executes user-defined events.
#
# Version:	$Revision$
#
# chkconfig:	345 99 01
# description:	Executes $HOME/.config/init.d/* start on startup,
#		and $HOME/.config/init.d/* stop on shutdown.

. /etc/rc.d/init.d/functions

ALLOWED=""
BANNED=""
STOP_WAIT_TIME=2
NICE=15
RUN_ARGS=""

# subdirectory with user scripts
scripts_dir=".config/init.d"

if [ -f /etc/sysconfig/userscripts ]; then
	. /etc/sysconfig/userscripts
fi

VALID_SHELLS=$(cat /etc/shells)

is_on_list()
{
	local word=$1
	local list=$2

	local IFS
	unset IFS
	for tword in $list; do
		[ "$tword" = "$word" ] && return 0
	done
	return 1
}

is_allowed()
{
	local user=$1
	local shell=$2

	is_on_list "$shell" $VALID_SHELLS || return 1
	if [ -n "$ALLOWED" ]; then
		is_on_list "$user" $ALLOWED || return 1
	fi
	if [ -n "$BANNED" ]; then
		is_on_list "$user" $BANNED && return 1
	fi

	return 0
}

run_scripts()
{
	local action="$1"

	SCRIPTS_RUN=0
	local IFS=":"
	while read user pass uid gid name home shell; do
		[ -d "$home/$scripts_dir" ] || continue

		if ! is_allowed "$user" "$shell"; then
			nls "User %s is not allowed to run scripts" "$user"
			continue
		fi

		for script in "$home/$scripts_dir"/*; do

			# skip backups
			case $script in
				*~|*.bak)
					continue
					;;
			esac

			show "Running %s %s as %s" "$script" "$action" "$user"
			busy

			if [ ! -x "$script" ]; then
				fail
				continue
			fi

			su - "$user" -c "exec /sbin/run-fast-or-hide -n '$NICE' $RUN_ARGS -- '$script' '$action'"
			local RET=$?
			deltext
			if [ $RET -eq 250 ]; then
				started
				: $((SCRIPTS_RUN++))
			else
				[ $RET -eq 0 ] && ok || fail
			fi
		done
	done < /etc/passwd
}

start()
{
	if [ -f /var/lock/subsys/userscripts ]; then
		msg_already_running "User scripts"
		return 1
	fi

	msg_starting "User scripts"; ok

	run_scripts start

	touch /var/lock/subsys/userscripts
}

stop()
{
	if [ ! -f /var/lock/subsys/userscripts ]; then
		msg_not_running "User scripts"
		return 2
	fi

	run_scripts stop

	msg_stopping "User scripts"; busy

	# give them some time to stop, but don't wait for finish
	[ "$SCRIPTS_RUN" -gt 0 ] && sleep $STOP_WAIT_TIME
	ok

	rm -f /var/lock/subsys/userscripts
}

status()
{
	if [ -f /var/lock/subsys/userscripts ]; then
		nls "User scripts should be running";
	else
		nls "User scripts should be stopped";
	fi
}

RETVAL=0
# See how we were called.
case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
  	status)
		status
		;;
	restart|force-reload)
		stop
		start
		exit $?
		;;
	*)
		msg_usage "$0 {start|stop|restart|force-reload|status}"
		exit 3
esac

exit $RETVAL
